@using FreelancerPlatform.Application.Extendsions
@model Dictionary<FreelancerPlatform.Application.Dtos.Chat.KeyChatViewModel, List<FreelancerPlatform.Application.Dtos.Chat.ChatViewModel>>

@{
    ViewData["Title"] = "Tin nhắn";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section inboxActive {
    active
}
<input id="hub-chat" value="0" type="hidden" />
<input id="freelancer-b" value="@ViewBag.FreelancerB" type="hidden"/>
<input id="user-id" value="@User.GetUserId()" type="hidden" />

<div class="chat-container" style="display: flex; width: 100%; height: calc(100vh - 170px); max-width: 1200px; margin: auto; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); border-radius: 10px; overflow: hidden;">

    <!-- Danh sách các tiêu đề chat -->
    <div id="list-title-chat" class="chat-list" style="width: 25%; background-color: #333; color: #fff; border-right: 1px solid #ddd; overflow-y: auto;">
        
        @{
            foreach(var i in Model)
            {
                                                <div class="chat-list-item" id="chat-title-@i.Key.HubChatId" style="padding: 20px; border-bottom: 1px solid #ddd; cursor: pointer; transition: background-color 0.3s;" onclick="showChat(@i.Key.HubChatId); $('#hub-chat').val(@i.Key.HubChatId); $('#freelancer-b').val(@(i.Key.FreelancerA != User.GetUserId() ? i.Key.FreelancerA : i.Key.FreelancerB))">
                                                <strong>@(i.Key.FreelancerA != User.GetUserId() ? $"{i.Key.LastNameA} {i.Key.FirstNameA}" : $"{i.Key.LastNameB} {i.Key.FirstNameB}")</strong><br>
                                                </div>
            }
        }
    </div>

    <!-- Nội dung chat -->
    <div class="chat-content" id="chatContent" style="width: 75%; padding: 30px; display: flex; flex-direction: column; background-color: #ffffff;">
        <div id="messages" style="flex: 1; overflow-y: auto; margin-bottom: 20px;">
            <!-- Tin nhắn sẽ được hiển thị ở đây -->
        </div>

        <!-- Khung nhập và gửi tin nhắn -->
        <div style="display: flex; align-items: center;">
            <input id="messageInput" type="text" placeholder="Nhập tin nhắn..." style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px; margin-right: 10px;">
            <button style="padding: 10px 20px; background-color: #0078D4; color: #fff; border: none; border-radius: 5px; cursor: pointer;" onclick="sendMessage()">Gửi</button>
        </div>
    </div>
</div>
<script src="/lib/aspnet/signalr/dist/browser/signalr.js"></script>


<script type="text/javascript">
    var chatData1 = {};
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    connection.on("ReceiveMessage", function (senderName, hubChatId, message, timestamp) {
        
        var keys = Object.keys(chatData1);
        if (keys.includes(hubChatId)) {
            chatData1[hubChatId].push({ message: message, type: "received", timestamp: timestamp });
        }
        if (!keys.includes(hubChatId)) {
          
            $.ajax({
                url: '/Inbox/ReloadChat',
                type: 'POST',
                success: function (response) {
                    console.log('bat dau');
                    console.log(response);

                    var userId = $('#user-id').val();
                    for(var i in response){
                       // console.log(i.split("-"));
                       // console.log(response[i]);

                        var newChatData1 = {};
                        var keyOfChat = i.split("-");
                        var key = keyOfChat[0];
                        newChatData1[key] = [];
                        for (var j in response[i]) {
                            let date = new Date(response[i][j].createDay);
                           
                            // Lấy các thành phần ngày, tháng, năm, giờ và phút
                            let formattedDate = date.getFullYear() + '-' +
                                ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
                                ('0' + date.getDate()).slice(-2) + ' ' +
                                ('0' + date.getHours()).slice(-2) + ':' +
                                ('0' + date.getMinutes()).slice(-2);

                            newChatData1[key].push({
                                id: `${response[i][j].id}`, message: `${response[i][j].content}`, type: `${response[i][j].freelancerId == userId ? 'sent' : 'received'}`, timestamp: `${formattedDate}`, image: `${response[i][j].imageUrl}`, freelancerid: `${response[i][j].freelancerId}`
                            });
                        }

                        if (!keys.includes(key)) {
                            var container = document.getElementById('list-title-chat');

                            // Sử dụng insertAdjacentHTML để thêm HTML vào DOM
                            container.insertAdjacentHTML('beforeend', `
                                    <div class="chat-list-item" id="chat-title-${keyOfChat[0]}" style="padding: 20px; border-bottom: 1px solid #ddd; cursor: pointer; transition: background-color 0.3s;"
                                     onclick="showChat(${keyOfChat[0]});
                                              $('#hub-chat').val(${keyOfChat[0]});
                                              $('#freelancer-b').val(${keyOfChat[1] != userId ? keyOfChat[1] : keyOfChat[4]})">
                                    <strong>${keyOfChat[1] != userId ? keyOfChat[2] + ' ' + keyOfChat[3] : keyOfChat[5] + ' ' + keyOfChat[6]}</strong><br>
                                </div>
                            `);
                        }

                        chatData1 = newChatData1;
                    }
                },
                error: function (xhr, status, error) {
                    showError('Lỗi hệ thống khi gửi tin, vui lòng thử lại!');
                }
            });
        }

        
        showChat(currentChatId);
        



    });

    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

</script>

<script>
    // Dữ liệu giả lập cho nội dung chat
   // function LoadChatData(Data)
    //const chatData1 = {}
    var chatInital = 0;
    @{
        foreach(var hubChat in Model)
        {
            var key = hubChat.Key.HubChatId;

                                                    <text>
                                                        var keyObject = @key;
                                                        chatData1[keyObject] = [];
                                                    </text>
            foreach(var chat in hubChat.Value)
            {
                                                        <text>
                                                            chatData1[keyObject].push({
                                                        id: `@chat.Id`, message: `@Html.Raw(chat.Content)`, type: `@(chat.FreelancerId == User.GetUserId() ? "sent" : "received")`, timestamp: `@chat.CreateDay.ToString("yyyy-MM-dd HH:mm")`, image: `@chat.ImageUrl`, freelancerid: `@chat.FreelancerId`
                                                            });
                                            </text>
                if ((hubChat.Key.FreelancerA == ViewBag.FreelancerA && hubChat.Key.FreelancerB == ViewBag.FreelancerB) || (hubChat.Key.FreelancerA == ViewBag.FreelancerB && hubChat.Key.FreelancerB == ViewBag.FreelancerA))
                {
                                               <text>
                                                    chatInital = @hubChat.Key.HubChatId;
                                               </text>
                }
            }
        }
        }
        

    let currentChatId = null;

    if (chatInital != 0) {
        showChat(chatInital);
    }

    function showChat(chatId) {
        currentChatId = chatId;
        const chatContentDiv = document.getElementById('messages');
        chatContentDiv.innerHTML = ''; // Clear old content

        // Reset the styles of all chat list items
        document.querySelectorAll('.chat-list-item').forEach(item => {
            item.style.backgroundColor = ''; // Reset background color
            item.style.color = '#fff'; // Reset text color
        });

        const chatMessages = chatData1[chatId];
        if (chatMessages) {
            chatMessages.forEach(chat => {
               
                /*const messageDiv = document.createElement('div');
                messageDiv.classList.add('message', chat.type); // Add class for the message
                messageDiv.style.padding = '15px';
                messageDiv.style.marginBottom = '10px';
                messageDiv.style.maxWidth = '70%';
                messageDiv.style.borderRadius = '8px';
                messageDiv.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
                messageDiv.style.position = 'relative'; // Set position to relative for absolute positioning of timestamp

                // Create a div for the message text
                const messageText = document.createElement('div');
                messageText.textContent = chat.message;
                messageDiv.appendChild(messageText);

                // Create a div for the timestamp
                const timestampDiv = document.createElement('div');
                timestampDiv.textContent = chat.timestamp;
                timestampDiv.style.fontSize = 'smaller'; // Make the timestamp smaller
                timestampDiv.style.color = '#999'; // Color for the timestamp

                // Set positioning based on message type
                if (chat.type === "sent") {
                    timestampDiv.style.position = 'absolute'; // Position timestamp absolutely
                    timestampDiv.style.bottom = '5px'; // Distance from the bottom
                    timestampDiv.style.left = '10px'; // Distance from the left
                } else {
                    timestampDiv.style.position = 'absolute'; // Position timestamp absolutely
                    timestampDiv.style.bottom = '5px'; // Distance from the bottom
                    timestampDiv.style.right = '10px'; // Distance from the right
                }

                // Set the background color and text color based on the message type
                if (chat.type === "sent") {
                    messageDiv.style.backgroundColor = '#0078D4';
                    messageDiv.style.color = '#fff';
                    messageDiv.style.alignSelf = 'flex-end';
                    messageDiv.style.textAlign = 'right';
                    messageDiv.style.marginLeft = 'auto';
                } else {
                    messageDiv.style.backgroundColor = '#f2f2f2';
                    messageDiv.style.alignSelf = 'flex-start';
                    messageDiv.style.textAlign = 'left';
                    messageDiv.style.marginRight = 'auto';
                }

                // Append the timestamp to the message div
                messageDiv.appendChild(timestampDiv);
                chatContentDiv.appendChild(messageDiv);*/
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message', chat.type);
                messageDiv.style.display = 'block';
                messageDiv.style.alignItems = 'center';
                messageDiv.style.padding = '15px';
                messageDiv.style.marginBottom = '10px';
                messageDiv.style.borderRadius = '8px';
                messageDiv.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
                messageDiv.style.position = 'relative';
                messageDiv.style.wordWrap = 'break-word';
                messageDiv.style.maxWidth = 'fit-content';
                messageDiv.style.minWidth = '180px';
                messageDiv.style.cursor = 'pointer';
                messageDiv.dataset.messageId = chat.id;

                

                // Create a div to wrap the text and timestamp
                const messageContent = document.createElement('div');
                messageContent.style.display = 'inline-block';
                messageContent.style.wordWrap = 'break-word';
                messageContent.style.maxWidth = '100%';
                messageContent.style.paddingBottom = '10px';

                // Create a div for the message text
                const messageText = document.createElement('div');
                messageText.textContent = chat.message;
                messageContent.appendChild(messageText);

                // Create a div for the timestamp
                const timestampDiv = document.createElement('div');
                timestampDiv.textContent = chat.timestamp;
                timestampDiv.style.fontSize = 'smaller';
                timestampDiv.style.color = '#999';

                // Set positioning based on message type
                if (chat.type === "sent") {
                    timestampDiv.style.position = 'absolute';
                    timestampDiv.style.bottom = '5px';
                    timestampDiv.style.left = '10px';

                    messageDiv.style.backgroundColor = '#0078D4';
                    messageDiv.style.color = '#fff';
                    messageDiv.style.textAlign = 'right';
                    messageDiv.style.marginLeft = 'auto';
                    messageDiv.style.marginRight = '0';
                    messageContent.style.textAlign = 'left';

                    messageDiv.appendChild(messageContent);



                    // Create a "thu hồi" button (hidden by default)
                    const recallButton = document.createElement('button');
                    recallButton.textContent = 'Thu hồi'; // Button name
                    recallButton.style.fontSize = '12px';
                    recallButton.style.cursor = 'pointer';
                    recallButton.style.display = 'none'; // Hidden by default
                    recallButton.style.padding = '4px 8px';
                    recallButton.style.backgroundColor = '#ff4d4d';
                    recallButton.style.color = '#fff';
                    recallButton.style.border = 'none';
                    recallButton.style.borderRadius = '4px';

                    let hideButtonTimeout; // Variable to hold the timeout ID

                    // Function to show the recall button and set a timeout to hide it
                    function showRecallButton() {
                        recallButton.style.display = 'inline-block'; // Show the recall button when mouse is over
                        clearTimeout(hideButtonTimeout); // Clear any existing timeout to hide the button
                    }

                    function hideRecallButton() {
                        hideButtonTimeout = setTimeout(() => {
                            recallButton.style.display = 'none'; // Hide the button after 1 second
                        }, 1000);
                    }

                    // Add mouseover event to the message div to show the recall button
                    messageDiv.addEventListener('mouseover', showRecallButton);

                    // Add mouseout event to the message div to hide the recall button
                    messageDiv.addEventListener('mouseout', hideRecallButton);

                    // Keep the button visible while hovering over it
                    recallButton.addEventListener('mouseover', showRecallButton);

                    // Hide the button when mouse leaves the recall button
                    recallButton.addEventListener('mouseout', hideRecallButton);

                    // Add click event to recall button
                    recallButton.addEventListener('click', function () {
                        var messageId = messageDiv.dataset.messageId;
                        //alert(messageId);
                        $.ajax({
                            url: '/Inbox/ReCallInbox',
                            type: 'POST',
                            data: {
                                // hubChatId: $('#hub-chat').val(),
                                id: messageId
                            },
                            success: function (response) {
                                messageDiv.textContent = 'Đã thu hồi';
                            },
                            error: function (xhr, status, error) {
                                showError('Lỗi hệ thống khi thu hồi, vui lòng thử lại!');
                                console.log(error);
                            }
                        });

                        //chatContentDiv.removeChild(messageDiv); // Remove the message from the DOM
                    });

                    // Position the recall button on the left of the message
                    recallButton.style.position = 'absolute';
                    recallButton.style.left = '-65px';
                    recallButton.style.top = '50%';
                    recallButton.style.transform = 'translateY(-50%)';

                    // Append the recall button to the message div
                    messageDiv.appendChild(recallButton);
                } else {
                    // Create avatar image
                    const avatar = document.createElement('img');
                    avatar.src = chat.image === '' || chat.image === null ? '/images/default-avatar.jpg' : `/Image/${chat.image}`;
                    avatar.style.width = '40px';
                    avatar.style.height = '40px';
                    avatar.style.borderRadius = '50%';

                    // Create the anchor tag
                    const avatarLink = document.createElement('a');
                    // Set the href attribute of the anchor tag to the desired link
                    avatarLink.href = `chi-tiet-freelancer/${chat.freelancerid}`;

                    // Append the avatar to the anchor tag
                    avatarLink.appendChild(avatar);

                    // Positioning of the timestamp
                    timestampDiv.style.position = 'absolute';
                    timestampDiv.style.bottom = '5px';
                    timestampDiv.style.right = '10px';

                    // Message div styles
                    messageDiv.style.backgroundColor = '#f2f2f2';
                    messageDiv.style.color = '#000';
                    messageDiv.style.textAlign = 'left';
                    messageDiv.style.marginRight = 'auto';
                    messageDiv.style.marginLeft = '0';

                    avatarLink.style.marginRight = '10px'; // Add margin to the link if needed

                    // Append the avatar link to the message div
                    messageDiv.appendChild(avatarLink);

                    // Append the message content to the message div
                    messageDiv.appendChild(messageContent);

                    
                }

                // Append the timestamp to the message content
                messageContent.appendChild(timestampDiv);

               

                if (chat.message == 'Đã thu hồi') {
                    messageDiv.textContent = 'Đã thu hồi';
                }

                // Append the message div to the chat content div
                chatContentDiv.appendChild(messageDiv);


            });
        }

        chatContentDiv.scrollTop = chatContentDiv.scrollHeight;

        $('.chat-list-item').css('background-color', '');

        // Đặt màu nền cho thẻ div đã nhấn
        $(`#chat-title-${currentChatId}`).css('background-color', '#0078D4');
    }

    function sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const messageText = messageInput.value;
        if (messageText.trim() !== '' && currentChatId !== null) {
            const timestamp = new Date().toLocaleString(); // Get current timestamp
            chatData1[currentChatId].push({ message: messageText, type: "sent", timestamp: timestamp });
            showChat(currentChatId); // Refresh chat
            messageInput.value = ''; // Clear input
            var freelancerB = $('#freelancer-b').val();

            $.ajax({
                url: '/Inbox/CreateChat',
                type: 'POST',
                data: {
                    // hubChatId: $('#hub-chat').val(),
                    content: messageText,
                    freelancerA: @ViewBag.FreelancerA,
                    freelancerB: $('#freelancer-b').val(),
                },
                success: function (response) {
                    connection.invoke("SendMessageToUser", freelancerB, `${currentChatId}`, messageText).catch(function (err) {//SendMessageToUser
                        return console.error(err.toString());
                    });
                },
                error: function (xhr, status, error) {
                    showError('Lỗi hệ thống khi gửi tin, vui lòng thử lại!');
                    console.log(error);
                }
            });


            /*connection.invoke("SendMessageToUser", freelancerB, `${currentChatId}`, messageText).catch(function (err) {//SendMessageToUser
                return console.error(err.toString());
            });*/

            
        }
    }


</script>



@section script {
    <script>
        /*$(document).ready(function () {
            $('.chat-list-item').on('click', function () {
                // Xóa màu nền của tất cả các thẻ div
                $('.chat-list-item').css('background-color', '');

                // Đặt màu nền cho thẻ div đã nhấn
                $(this).css('background-color', '#0078D4');
            });
        });*/
    </script>
}